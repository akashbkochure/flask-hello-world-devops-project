pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = "akashbkochure/flask-hello-world"
        CONTAINER_NAME = "flask-hello-world"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        HELM_CHART_NAME = "flask-hello-world"
        HELM_RELEASE_NAME = "flask-hello-world"
        HELM_REPO_NAME = "my-helm-repo"
        HELM_REPO_URL = "http://<minikube-ip>:<minikube-port>/chartrepo"
        MINIKUBE_IP = "<minikube-ip>"
        MINIKUBE_SSH_USER = "<minikube-ssh-user>"
    }
    
    stages {
        /* We do not need a stage for checkout here since it is done by default when using "Pipeline script from SCM" option. */
        
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'docker image build -t $DOCKER_HUB_REPO:latest .'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                sh 'docker stop $CONTAINER_NAME || true'
                sh 'docker rm $CONTAINER_NAME || true'
                sh 'docker run --name $CONTAINER_NAME $DOCKER_HUB_REPO /bin/bash -c "pytest test.py && flake8"'
            }
        }
        stage('Push') {
            steps {
                echo 'Pushing image..'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'docker push $DOCKER_HUB_REPO:latest'
            }
        }
        stage('Package') {
            steps {
                echo 'Packaging Helm chart..'
                sh 'helm package helm/flask-hello-world -d helm/charts'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying with Helm..'
                sh "ssh $MINIKUBE_SSH_USER@$MINIKUBE_IP 'helm repo add $HELM_REPO_NAME $HELM_REPO_URL'"
                sh "ssh $MINIKUBE_SSH_USER@$MINIKUBE_IP 'helm upgrade --install $HELM_RELEASE_NAME $HELM_CHART_NAME --set image.repository=$DOCKER_HUB_REPO,image.tag=latest,replicaCount=3 --repo $HELM_REPO_NAME'"
            }
        }
    }
}
